buildscript {
	ext {
		protobufVersion = '4.27.2'
		protobufPluginVersion = '0.9.4'
		grpcVersion = '1.65.1'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.8'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.google.protobuf' version "${protobufPluginVersion}"
}

group = 'com.gold.auth'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	//Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//jackson: redis에서 자바 역직렬화 문제 해결 패키지
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	// grpc 프로토콜 버터를 사용하기 위한 핵심 라이브러리 (Protobuf 메시지의 직렬화 및 역직렬화를 지원합니다.)
	implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

	// grpc 서버, 클라이언트 설정
	implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE' // Spring Boot와 gRPC의 통합을 간편하게 도와주는 스타터
	implementation "io.grpc:grpc-netty-shaded:${grpcVersion}" // Netty Shaded 사용(gRPC 서버와 클라이언트의 Netty 전송 계층을 제공)
	implementation "io.grpc:grpc-protobuf:${grpcVersion}"     // Protobuf 메시지와 gRPC의 통합을 지원
	implementation "io.grpc:grpc-stub:${grpcVersion}"         // gRPC 클라이언트 스텁을 생성
	compileOnly 'org.apache.tomcat:annotations-api:6.0.53'    // 이걸 추가해야 gRPC 컴파일시 javax 어노테이션 오류가 발생하지 않는다.

	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// IDL (protobuf) 생성 관련 Gradle 설정
protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.22.3"
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.57.1'
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

// fat-jar setting for server
task gRpcServerJar(type: Jar) {
	manifest {
		attributes 'Main-Class': 'com.binghe.server.HelloServiceGrpcServer'
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

// fat-jar setting for client
task gRpcClientJar(type: Jar) {
	manifest {
		attributes 'Main-Class': 'com.binghe.client.HelloServiceClient'
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

tasks.named('test') {
	useJUnitPlatform()
}
